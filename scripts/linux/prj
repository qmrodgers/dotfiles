#!/usr/bin/env zsh

declare -A projects
file_name="${0##*/}"
base_name="${file_name%.*}"

show_help() {
    cat << EOF
Usage: $base_name [-h] <command> [arguments]
Manage your projects with the following commands:

Commands:
  fzf                Use fzf to select a project and return its path. Useful for scripting
  pick <shorthand>   Print the path of the project with the given shorthand. Useful for scripting
  list              List all projects
  add <shorthand> <longhand> <path> Add a new project
  delete <shorthand> | <longhand> Remove a project by its shorthand or longhand

Options:
  -h, --help         Display this help message and exit

Examples:
  $base_name fzf
  $base_name pick myproject
  $base_name list
  $base_name add myproject MyProject /path/to/project
  $base_name delete MyProject
EOF
}

check_key_exists() {
    local key="$1"
    if [[ -n $projects["$key"] ]]; then
        return 0
    else
        return 1
    fi
}

if [ -z "$1" ]; then
    show_help
    exit 0
elif [ ! -f "$HOME/.projects" ]; then
    touch "$HOME/.projects"
fi


while IFS=';' read -r shorthand longhand loc_path; do
    if check_key_exists "$shorthand" || check_key_exists "$longhand"; then
        echo "Duplicate project shorthand '$shorthand' or longhand '$longhand' found in $HOME/.projects. Manual intervention may be required. Exiting." >&2
        exit 1
    fi
    projects["$shorthand"]="$loc_path"
    projects["$longhand"]="$loc_path"
done < "$HOME/.projects"

if [ $1 = "fzf" ]; then
    fzf_list=()
    while IFS=';' read -r shorthand longhand loc_path; do
        fzf_list+=("$shorthand   $longhand   $loc_path")
    done < "$HOME/.projects"
    selected=$(printf "%s\n" "${fzf_list[@]}" | fzf --header="Select a project" --bind="enter:become(echo {3})" | sed 's/^"//;s/"$//')
    echo $selected
    exit 0

elif [ $1 = "pick" ]; then
    if [ -n "$2" ] && check_key_exists $2; then
        echo $projects["$2"]
    else
        echo "Project '$2' not found in $HOME/.projects. Exiting." >&2
        exit 1
    fi
    exit 0

elif [ $1 = "add" ]; then
    shorthand="$2"
    longhand="$3"
    loc_path="$4"
    if [ -z "$shorthand" ] || [ -z "$longhand" ] || [ -z "$loc_path" ]; then
        # Custom logic to request missing arguments
        #
        exit 1
    elif ( [ ! -d "$loc_path" ] && [ ! -f "$loc_path" ] ) || [ -z "$shorthand" ] || [ -z "$longhand" ]; then
        echo "Invalid path '$path' or shorthand '$shorthand' or longhand '$longhand'. Exiting." >&2
        exit 1
    fi
    loc_path=$(realpath "$loc_path")
    echo "$shorthand;$longhand;$loc_path" >> "$HOME/.projects"
    echo "Project added successfully -> $(tail -n 1 $HOME/.projects)"
    exit 0
elif [ $1 = "delete" ]; then
    if [ -z "$2" ]; then
        echo "No project specified. Exiting." >&2
        exit 1
    elif [ ! -v projects["$2"] ]; then
        echo "Project '$2' not found in $HOME/.projects. Exiting." >&2
        exit 1
    fi

    # delete location in $HOME/.projects
    sed -i -e "/$2/d" -e "/projects\[\"$2\"\]/d" "$HOME/.projects"
    echo "Project delete successfully -> $2 | ${projects[$2]}"
    exit 0
elif [ $1 = "list" ]; then
    if [ ! -s "$HOME/.projects" ]; then
        echo "No projects found in $HOME/.projects."
        exit 0
    fi

    cat "$HOME/.projects"
    exit 0

else
    show_help
    exit 0
fi



